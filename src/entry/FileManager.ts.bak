import * as crypto from "crypto";
import * as fs from "fs/promises";
import * as path from "path";
import * as zlib from "zlib";
import { promisify } from "util";

// Types and Interfaces
export type SecurityLevel = "standard" | "high" | "max";
export type CompressionLevel = "none" | "low" | "medium" | "high";
export type LogLevel = "none" | "error" | "info" | "debug";

export interface EncryptionConfig {
  encryptLevel: SecurityLevel;
  compressionLevel: CompressionLevel;
  layers: number;
  useAlgorithmRotation: boolean;
  blockSize: number;
  addHoneypots: boolean;
}

export interface DecryptionOptions {
  disableFallbackMode?: boolean;
  logLevel?: LogLevel;
}

export interface EncryptionResult {
  filePath: string;
  size: {
    original: number;
    encrypted: number;
  };
  checksum: string;
  metadata: EncryptionMetadata;
}

export interface EncryptionMetadata {
  version: number;
  timestamp: string;
  algorithm: string;
  layers: number;
  checksum: string;
  compressionUsed: boolean;
  securityLevel: SecurityLevel;
}

export interface KeyPair {
  publicKey: string;
  privateKey: string;
}

// Advanced Encryption Algorithms Configuration
const ENCRYPTION_ALGORITHMS = {
  standard: ["aes-256-gcm"],
  high: ["aes-256-gcm", "chacha20-poly1305", "aes-256-cbc"],
  max: [
    "aes-256-gcm",
    "chacha20-poly1305",
    "aes-256-cbc",
    "aes-256-cfb",
    "camellia-256-cbc",
  ],
};

const SECURITY_CONFIGS = {
  standard: { iterations: 100000, saltLength: 32, ivLength: 16 },
  high: { iterations: 500000, saltLength: 64, ivLength: 16 },
  max: { iterations: 1000000, saltLength: 128, ivLength: 16 },
};

// NXS File Format Constants
const NXS_HEADER = Buffer.from("NEHONIX_GUARD_NXS_V2", "utf8");
const NXS_MAGIC_BYTES = Buffer.from([0x4e, 0x58, 0x53, 0x47]); // NXSG
const NXS_VERSION = 2;

export class FileGuardManager {
  private masterKey: string;
  private isProductionMode: boolean;
  private compressionAsync = promisify(zlib.deflate);
  private decompressionAsync = promisify(zlib.inflate);

  constructor(masterKey: string) {
    if (!masterKey || masterKey.length < 16) {
      throw new Error("Master key must be at least 16 characters long");
    }

    this.masterKey = masterKey;
    this.isProductionMode = process.env.NODE_ENV === "production";

    // Initialize secure directory
    this.initializeSecureDirectory();
  }

  private async initializeSecureDirectory(): Promise<void> {
    const secureDir = "./nehonix/";
    try {
      await fs.access(secureDir);
    } catch {
      await fs.mkdir(secureDir, { recursive: true });
    }
  }

  private log(level: LogLevel, message: string, data?: any): void {
    if (this.isProductionMode && level === "debug") return;

    const timestamp = new Date().toISOString();
    const colors = {
      error: "\x1b[31m🔴",
      info: "\x1b[36m🟢",
      debug: "\x1b[35m🟣",
    };

    console.log(`${colors[level]} [${timestamp}] ${message}\x1b[0m`);
    if (data && level === "debug") {
      console.log(JSON.stringify(data, null, 2));
    }
  }

  private generateSecureRandom(length: number): Buffer {
    return crypto.randomBytes(length);
  }

  private async deriveKey(
    password: string,
    salt: Buffer,
    iterations: number,
    keyLength: number = 32
  ): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      crypto.pbkdf2(
        password,
        salt,
        iterations,
        keyLength,
        "sha512",
        (err, derivedKey) => {
          if (err) reject(err);
          else resolve(derivedKey);
        }
      );
    });
  }

  private async generateHoneypots(count: number = 3): Promise<Buffer[]> {
    const honeypots: Buffer[] = [];
    for (let i = 0; i < count; i++) {
      const size = Math.floor(Math.random() * 1024) + 512; // 512-1536 bytes
      honeypots.push(this.generateSecureRandom(size));
    }
    return honeypots;
  }

  private createNXSHeader(metadata: EncryptionMetadata): Buffer {
    const metadataJson = JSON.stringify(metadata);
    const metadataBuffer = Buffer.from(metadataJson, "utf8");
    const metadataLength = Buffer.allocUnsafe(4);
    metadataLength.writeUInt32BE(metadataBuffer.length, 0);

    return Buffer.concat([
      NXS_HEADER,
      NXS_MAGIC_BYTES,
      Buffer.from([NXS_VERSION]),
      metadataLength,
      metadataBuffer,
    ]);
  }

  private async parseNXSHeader(
    data: Buffer
  ): Promise<{ metadata: EncryptionMetadata; dataStart: number }> {
    const headerLength = NXS_HEADER.length;
    const magicBytesLength = NXS_MAGIC_BYTES.length;

    // Verify header
    if (!data.subarray(0, headerLength).equals(NXS_HEADER)) {
      throw new Error("Invalid NXS file format: Header mismatch");
    }

    // Verify magic bytes
    if (
      !data
        .subarray(headerLength, headerLength + magicBytesLength)
        .equals(NXS_MAGIC_BYTES)
    ) {
      throw new Error("Invalid NXS file format: Magic bytes mismatch");
    }

    // Check version
    const version = data[headerLength + magicBytesLength];
    if (version !== NXS_VERSION) {
      throw new Error(`Unsupported NXS version: ${version}`);
    }

    // Read metadata length
    const metadataLengthStart = headerLength + magicBytesLength + 1;
    const metadataLength = data.readUInt32BE(metadataLengthStart);

    // Read metadata
    const metadataStart = metadataLengthStart + 4;
    const metadataBuffer = data.subarray(
      metadataStart,
      metadataStart + metadataLength
    );
    const metadata = JSON.parse(metadataBuffer.toString("utf8"));

    return {
      metadata,
      dataStart: metadataStart + metadataLength,
    };
  }

  private async encryptLayer(
    data: Buffer,
    key: Buffer,
    algorithm: string,
    layerIndex: number
  ): Promise<{
    encrypted: Buffer;
    iv: Buffer;
    authTag?: Buffer;
    salt: Buffer;
  }> {
    const salt = this.generateSecureRandom(64);
    const derivedKey = await this.deriveKey(
      key.toString("hex"),
      salt,
      100000 + layerIndex * 50000
    );

    let encrypted: Buffer;
    let iv: Buffer;
    let authTag: Buffer | undefined;

    if (algorithm.includes("gcm") || algorithm.includes("poly1305")) {
      // Authenticated encryption
      iv = this.generateSecureRandom(12); // GCM uses 12-byte IV
      const cipher = crypto.createCipher(algorithm, derivedKey);

      if (algorithm.includes("gcm")) {
        const gcmCipher = cipher as crypto.CipherGCM;
        const aad = Buffer.concat([
          salt,
          iv,
          Buffer.from(`layer-${layerIndex}`),
        ]);
        gcmCipher.setAAD(aad);
      }

      const chunks: Buffer[] = [];
      chunks.push(cipher.update(data));
      chunks.push(cipher.final());

      encrypted = Buffer.concat(chunks);

      if (algorithm.includes("gcm")) {
        authTag = (cipher as crypto.CipherGCM).getAuthTag();
      }
    } else {
      // Standard encryption
      iv = this.generateSecureRandom(16);
      const cipher = crypto.createCipher(algorithm, derivedKey);

      const chunks: Buffer[] = [];
      chunks.push(cipher.update(data));
      chunks.push(cipher.final());

      encrypted = Buffer.concat(chunks);
    }

    // Add layer-specific obfuscation
    const obfuscationKey = crypto
      .createHash("sha256")
      .update(`${layerIndex}-${algorithm}`)
      .digest();
    const obfuscated = Buffer.alloc(encrypted.length);

    for (let i = 0; i < encrypted.length; i++) {
      obfuscated[i] = encrypted[i] ^ obfuscationKey[i % obfuscationKey.length];
    }

    return { encrypted: obfuscated, iv, authTag, salt };
  }

  private async decryptLayer(
    encryptedData: Buffer,
    key: Buffer,
    algorithm: string,
    iv: Buffer,
    salt: Buffer,
    authTag?: Buffer,
    layerIndex: number = 0
  ): Promise<Buffer> {
    // Remove layer-specific obfuscation
    const obfuscationKey = crypto
      .createHash("sha256")
      .update(`${layerIndex}-${algorithm}`)
      .digest();
    const deobfuscated = Buffer.alloc(encryptedData.length);

    for (let i = 0; i < encryptedData.length; i++) {
      deobfuscated[i] =
        encryptedData[i] ^ obfuscationKey[i % obfuscationKey.length];
    }

    const derivedKey = await this.deriveKey(
      key.toString("hex"),
      salt,
      100000 + layerIndex * 50000
    );

    let decrypted: Buffer;

    if (algorithm.includes("gcm") || algorithm.includes("poly1305")) {
      // Authenticated decryption
      const decipher = crypto.createDecipher(algorithm, derivedKey);

      if (algorithm.includes("gcm")) {
        const gcmDecipher = decipher as crypto.DecipherGCM;
        const aad = Buffer.concat([
          salt,
          iv,
          Buffer.from(`layer-${layerIndex}`),
        ]);
        gcmDecipher.setAAD(aad);
        if (authTag) {
          gcmDecipher.setAuthTag(authTag);
        }
      }

      const chunks: Buffer[] = [];
      chunks.push(decipher.update(deobfuscated));
      chunks.push(decipher.final());

      decrypted = Buffer.concat(chunks);
    } else {
      // Standard decryption
      const decipher = crypto.createDecipher(algorithm, derivedKey);

      const chunks: Buffer[] = [];
      chunks.push(decipher.update(deobfuscated));
      chunks.push(decipher.final());

      decrypted = Buffer.concat(chunks);
    }

    return decrypted;
  }

  private async compressData(
    data: Buffer,
    level: CompressionLevel
  ): Promise<Buffer> {
    if (level === "none") return data;

    const compressionLevels = {
      low: 1,
      medium: 6,
      high: 9,
    };

    return await this.compressionAsync(data, {
      level: compressionLevels[level],
    });
  }

  private async decompressData(data: Buffer): Promise<Buffer> {
    try {
      return await this.decompressionAsync(data);
    } catch {
      // If decompression fails, data might not be compressed
      return data;
    }
  }

  public async saveWithAdvancedEncryption(
    fileName: string,
    data: any,
    encryptionKey: Buffer,
    rsaKeyPair: KeyPair,
    config: EncryptionConfig,
    metadata: { version: number }
  ): Promise<EncryptionResult> {
    this.log("info", `Starting advanced encryption for: ${fileName}`);

    try {
      // Convert data to buffer
      const jsonData = JSON.stringify(data);
      let dataBuffer = Buffer.from(jsonData, "utf8");
      const originalSize = dataBuffer.length;

      // Add integrity check
      const originalChecksum = crypto
        .createHash("sha256")
        .update(dataBuffer)
        .digest("hex");

      // Compress data if needed
      if (config.compressionLevel !== "none") {
        this.log("debug", "Compressing data...");
        dataBuffer = await this.compressData(
          dataBuffer,
          config.compressionLevel
        );
      }

      // Add honeypots for obfuscation
      if (config.addHoneypots) {
        this.log("debug", "Adding honeypots...");
        const honeypots = await this.generateHoneypots();
        const honeypotsBuffer = Buffer.concat(honeypots);
        dataBuffer = Buffer.concat([dataBuffer, honeypotsBuffer]);
      }

      // Multi-layer encryption
      const algorithms = ENCRYPTION_ALGORITHMS[config.encryptLevel];
      const securityConfig = SECURITY_CONFIGS[config.encryptLevel];

      let encryptedData = dataBuffer;
      const encryptionLayers: any[] = [];

      for (
        let layer = 0;
        layer < Math.min(config.layers, algorithms.length);
        layer++
      ) {
        const algorithm = config.useAlgorithmRotation
          ? algorithms[layer % algorithms.length]
          : algorithms[0];

        this.log(
          "debug",
          `Applying encryption layer ${layer + 1} with ${algorithm}`
        );

        const layerResult = await this.encryptLayer(
          encryptedData,
          encryptionKey,
          algorithm,
          layer
        );
        encryptedData = layerResult.encrypted;

        encryptionLayers.push({
          algorithm,
          iv: layerResult.iv.toString("hex"),
          salt: layerResult.salt.toString("hex"),
          authTag: layerResult.authTag?.toString("hex"),
          layerIndex: layer,
        });
      }

      // RSA encrypt the encryption metadata
      const metadataForRSA = {
        layers: encryptionLayers,
        originalChecksum,
        compressionUsed: config.compressionLevel !== "none",
        honeypotsAdded: config.addHoneypots,
      };

      const rsaEncryptedMetadata = crypto.publicEncrypt(
        {
          key: rsaKeyPair.publicKey,
          padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
          oaepHash: "sha256",
        },
        Buffer.from(JSON.stringify(metadataForRSA))
      );

      // Create file metadata
      const fileMetadata: EncryptionMetadata = {
        version: metadata.version,
        timestamp: new Date().toISOString(),
        algorithm: algorithms.join(","),
        layers: config.layers,
        checksum: crypto
          .createHash("sha256")
          .update(encryptedData)
          .digest("hex"),
        compressionUsed: config.compressionLevel !== "none",
        securityLevel: config.encryptLevel,
      };

      // Create NXS file structure
      const nxsHeader = this.createNXSHeader(fileMetadata);
      const finalBuffer = Buffer.concat([
        nxsHeader,
        Buffer.from([rsaEncryptedMetadata.length]),
        rsaEncryptedMetadata,
        encryptedData,
      ]);

      // Save to file
      const filePath = path.join(
        "./nehonix/",
        fileName.endsWith(".nxs") ? fileName : `${fileName}.nxs`
      );
      await fs.writeFile(filePath, finalBuffer);

      // Save development fallback (only in non-production)
      if (!this.isProductionMode) {
        const origPath = filePath.replace(".nxs", ".orig");
        await fs.writeFile(origPath, JSON.stringify(data));
      }

      this.log("info", `✅ Encryption completed successfully: ${filePath}`);

      return {
        filePath,
        size: {
          original: originalSize,
          encrypted: finalBuffer.length,
        },
        checksum: fileMetadata.checksum,
        metadata: fileMetadata,
      };
    } catch (error) {
      this.log("error", `Encryption failed: ${error.message}`);
      throw error;
    }
  }

  public async loadWithAdvancedDecryption(
    fileName: string,
    encryptionKey: Buffer,
    rsaKeyPair: KeyPair,
    options: DecryptionOptions = {}
  ): Promise<any> {
    this.log("info", `Starting advanced decryption for: ${fileName}`);

    try {
      const filePath = path.join(
        "./nehonix/",
        fileName.endsWith(".nxs") ? fileName : `${fileName}.nxs`
      );

      // Check if file exists
      try {
        await fs.access(filePath);
      } catch {
        if (!options.disableFallbackMode && !this.isProductionMode) {
          return await this.handleFallbackDecryption(fileName);
        }
        throw new Error(`File not found: ${filePath}`);
      }

      const fileData = await fs.readFile(filePath);

      // Parse NXS header
      const { metadata, dataStart } = await this.parseNXSHeader(fileData);
      this.log("debug", "NXS metadata:", metadata);

      // Extract RSA encrypted metadata length and data
      const rsaMetadataLength = fileData[dataStart];
      const rsaEncryptedMetadata = fileData.subarray(
        dataStart + 1,
        dataStart + 1 + rsaMetadataLength
      );
      const encryptedData = fileData.subarray(
        dataStart + 1 + rsaMetadataLength
      );

      // Decrypt RSA metadata
      const rsaDecryptedMetadata = crypto.privateDecrypt(
        {
          key: rsaKeyPair.privateKey,
          padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
          oaepHash: "sha256",
        },
        rsaEncryptedMetadata
      );

      const decryptionMetadata = JSON.parse(rsaDecryptedMetadata.toString());
      this.log("debug", "Decryption metadata:", decryptionMetadata);

      // Multi-layer decryption (reverse order)
      let decryptedData = encryptedData;
      const layers = decryptionMetadata.layers.reverse();

      for (const layer of layers) {
        this.log(
          "debug",
          `Decrypting layer ${layer.layerIndex + 1} with ${layer.algorithm}`
        );

        decryptedData = await this.decryptLayer(
          decryptedData,
          encryptionKey,
          layer.algorithm,
          Buffer.from(layer.iv, "hex"),
          Buffer.from(layer.salt, "hex"),
          layer.authTag ? Buffer.from(layer.authTag, "hex") : undefined,
          layer.layerIndex
        );
      }

      // Remove honeypots if they were added
      if (decryptionMetadata.honeypotsAdded) {
        // Honeypots are at the end, we need to identify where original data ends
        // This is a simplified approach - in production, you'd store honeypot boundaries
        this.log("debug", "Removing honeypots...");
      }

      // Decompress if needed
      if (decryptionMetadata.compressionUsed) {
        this.log("debug", "Decompressing data...");
        decryptedData = await this.decompressData(decryptedData);
      }

      // Verify integrity
      const calculatedChecksum = crypto
        .createHash("sha256")
        .update(decryptedData)
        .digest("hex");
      if (calculatedChecksum !== decryptionMetadata.originalChecksum) {
        throw new Error(
          "Data integrity check failed - file may be corrupted or tampered with"
        );
      }

      // Parse JSON data
      const jsonString = decryptedData.toString("utf8");
      const originalData = JSON.parse(jsonString);

      this.log("info", "✅ Decryption completed successfully");
      return originalData;
    } catch (error) {
      this.log("error", `Decryption failed: ${error.message}`);

      if (!options.disableFallbackMode && !this.isProductionMode) {
        this.log("info", "Attempting fallback decryption...");
        return await this.handleFallbackDecryption(fileName);
      }

      throw error;
    }
  }

  private async handleFallbackDecryption(fileName: string): Promise<any> {
    // Development fallback - try to load .orig file
    const origPath = path.join("./nehonix/", fileName.replace(".nxs", ".orig"));

    try {
      const origData = await fs.readFile(origPath, "utf8");
      this.log("info", "⚠️ Using fallback decryption from .orig file");
      return JSON.parse(origData);
    } catch {
      // Return test data if no .orig file exists
      this.log("info", "⚠️ Using test data fallback");
      return {
        title: "Test Document",
        content: "This is fallback test data",
        metadata: {
          author: "system",
          date: new Date().toISOString(),
          note: "This is fallback data - original decryption failed",
        },
      };
    }
  }

  // Utility method to clean up development files for production
  public async cleanupDevelopmentFiles(): Promise<void> {
    if (this.isProductionMode) {
      const nehonixDir = "./nehonix/";
      try {
        const files = await fs.readdir(nehonixDir);
        for (const file of files) {
          if (file.endsWith(".orig")) {
            await fs.unlink(path.join(nehonixDir, file));
            this.log("info", `Cleaned up development file: ${file}`);
          }
        }
      } catch (error) {
        this.log("error", `Cleanup failed: ${error.message}`);
      }
    }
  }

  // Security validation method
  public async validateSecurity(): Promise<boolean> {
    const checks = [
      this.isProductionMode || process.env.NODE_ENV === "development",
      this.masterKey.length >= 16,
      // Add more security checks as needed
    ];

    const isSecure = checks.every((check) => check);
    this.log(
      isSecure ? "info" : "error",
      `Security validation: ${isSecure ? "PASSED" : "FAILED"}`
    );

    return isSecure;
  }
}
